#!/usr/bin/env ruby
require_relative '../config/environment'

Aws.config[:logger] = ActiveSupport::Logger.new($stdout)

module SimpleQueue
  class Monitor
    def initialize
      @accounts = Account.active.all
      @accounts.each(&:readonly!)
      @workers = @accounts.map { |account| QueueWorker.new account }
      @pool = Concurrent::ThreadPoolExecutor.new(
        min_threads: ENV['SIDEKIQ_CONCURRENCY'] || 50,
        max_threads: ENV['SIDEKIQ_CONCURRENCY'] || 50,
        max_queue: 0
      )
    end

    def wait
      sleep 20
    end

    def batch_process(worker)
      1.upto(@pool.remaining_capacity) do
        @pool.post { worker.poll }
      end
    end

    def start
      loop do
        @workers.each do |worker|
          batch_process(worker) unless worker.size.zero?
        end
        wait
      end
    end
  end
end

SimpleQueue::Monitor.new.start
